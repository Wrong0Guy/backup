App.js 
import logo from './logo.svg';
import './App.css';

import React, { Component } from 'react';

class DataFetcher extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: [],
      filteredData: [],
      isLoading: false,
      error: null,
      filterQuery: '',
    };
  }

  componentDidMount() {
    this.fetchData();
  }

  componentDidUpdate(prevProps, prevState) {
    // Trigger additional API calls or data processing based on state changes
    if (prevState.filterQuery !== this.state.filterQuery) {
      this.applyFilter();
    }
  }

  fetchData = async () => {
    this.setState({ isLoading: true, error: null });
    try {
      const response = await fetch('https://api.example.com/data');
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();
      this.setState({ data, filteredData: data, isLoading: false });
    } catch (error) {
      this.setState({ error: error.message, isLoading: false });
    }
  };

  handleFilterChange = (event) => {
    this.setState({ filterQuery: event.target.value });
  };

  applyFilter = () => {
    const { data, filterQuery } = this.state;
    const filteredData = data.filter((item) =>
      item.name.toLowerCase().includes(filterQuery.toLowerCase())
    );
    this.setState({ filteredData });
  };

  render() {
    const { filteredData, isLoading, error, filterQuery } = this.state;

    return (
      <div>
        <h1>Data Fetcher</h1>
        <input
          type="text"
          placeholder="Filter by name"
          value={filterQuery}
          onChange={this.handleFilterChange}
        />
        {isLoading && <p>Loading data...</p>}
        {error && <p>Error: {error}</p>}
        {!isLoading && !error && (
          <table>
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
              </tr>
            </thead>
            <tbody>
              {filteredData.map((item) => (
                <tr key={item.id}>
                  <td>{item.id}</td>
                  <td>{item.name}</td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    );
  }
}

export default DataFetcher;
